// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"context"
	"sync"

	"github.com/bigflood/leaderboard/api"
)

type FakeLeaderBoard struct {
	GetRanksStub        func(context.Context, int, int) ([]api.User, error)
	getRanksMutex       sync.RWMutex
	getRanksArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	getRanksReturns struct {
		result1 []api.User
		result2 error
	}
	getRanksReturnsOnCall map[int]struct {
		result1 []api.User
		result2 error
	}
	GetUserStub        func(context.Context, string) (api.User, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserReturns struct {
		result1 api.User
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 api.User
		result2 error
	}
	SetUserStub        func(context.Context, string, int) error
	setUserMutex       sync.RWMutex
	setUserArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	setUserReturns struct {
		result1 error
	}
	setUserReturnsOnCall map[int]struct {
		result1 error
	}
	UserCountStub        func(context.Context) (int, error)
	userCountMutex       sync.RWMutex
	userCountArgsForCall []struct {
		arg1 context.Context
	}
	userCountReturns struct {
		result1 int
		result2 error
	}
	userCountReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLeaderBoard) GetRanks(arg1 context.Context, arg2 int, arg3 int) ([]api.User, error) {
	fake.getRanksMutex.Lock()
	ret, specificReturn := fake.getRanksReturnsOnCall[len(fake.getRanksArgsForCall)]
	fake.getRanksArgsForCall = append(fake.getRanksArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetRanksStub
	fakeReturns := fake.getRanksReturns
	fake.recordInvocation("GetRanks", []interface{}{arg1, arg2, arg3})
	fake.getRanksMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLeaderBoard) GetRanksCallCount() int {
	fake.getRanksMutex.RLock()
	defer fake.getRanksMutex.RUnlock()
	return len(fake.getRanksArgsForCall)
}

func (fake *FakeLeaderBoard) GetRanksCalls(stub func(context.Context, int, int) ([]api.User, error)) {
	fake.getRanksMutex.Lock()
	defer fake.getRanksMutex.Unlock()
	fake.GetRanksStub = stub
}

func (fake *FakeLeaderBoard) GetRanksArgsForCall(i int) (context.Context, int, int) {
	fake.getRanksMutex.RLock()
	defer fake.getRanksMutex.RUnlock()
	argsForCall := fake.getRanksArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLeaderBoard) GetRanksReturns(result1 []api.User, result2 error) {
	fake.getRanksMutex.Lock()
	defer fake.getRanksMutex.Unlock()
	fake.GetRanksStub = nil
	fake.getRanksReturns = struct {
		result1 []api.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaderBoard) GetRanksReturnsOnCall(i int, result1 []api.User, result2 error) {
	fake.getRanksMutex.Lock()
	defer fake.getRanksMutex.Unlock()
	fake.GetRanksStub = nil
	if fake.getRanksReturnsOnCall == nil {
		fake.getRanksReturnsOnCall = make(map[int]struct {
			result1 []api.User
			result2 error
		})
	}
	fake.getRanksReturnsOnCall[i] = struct {
		result1 []api.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaderBoard) GetUser(arg1 context.Context, arg2 string) (api.User, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserStub
	fakeReturns := fake.getUserReturns
	fake.recordInvocation("GetUser", []interface{}{arg1, arg2})
	fake.getUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLeaderBoard) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeLeaderBoard) GetUserCalls(stub func(context.Context, string) (api.User, error)) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeLeaderBoard) GetUserArgsForCall(i int) (context.Context, string) {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLeaderBoard) GetUserReturns(result1 api.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 api.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaderBoard) GetUserReturnsOnCall(i int, result1 api.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 api.User
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 api.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaderBoard) SetUser(arg1 context.Context, arg2 string, arg3 int) error {
	fake.setUserMutex.Lock()
	ret, specificReturn := fake.setUserReturnsOnCall[len(fake.setUserArgsForCall)]
	fake.setUserArgsForCall = append(fake.setUserArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SetUserStub
	fakeReturns := fake.setUserReturns
	fake.recordInvocation("SetUser", []interface{}{arg1, arg2, arg3})
	fake.setUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLeaderBoard) SetUserCallCount() int {
	fake.setUserMutex.RLock()
	defer fake.setUserMutex.RUnlock()
	return len(fake.setUserArgsForCall)
}

func (fake *FakeLeaderBoard) SetUserCalls(stub func(context.Context, string, int) error) {
	fake.setUserMutex.Lock()
	defer fake.setUserMutex.Unlock()
	fake.SetUserStub = stub
}

func (fake *FakeLeaderBoard) SetUserArgsForCall(i int) (context.Context, string, int) {
	fake.setUserMutex.RLock()
	defer fake.setUserMutex.RUnlock()
	argsForCall := fake.setUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLeaderBoard) SetUserReturns(result1 error) {
	fake.setUserMutex.Lock()
	defer fake.setUserMutex.Unlock()
	fake.SetUserStub = nil
	fake.setUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLeaderBoard) SetUserReturnsOnCall(i int, result1 error) {
	fake.setUserMutex.Lock()
	defer fake.setUserMutex.Unlock()
	fake.SetUserStub = nil
	if fake.setUserReturnsOnCall == nil {
		fake.setUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLeaderBoard) UserCount(arg1 context.Context) (int, error) {
	fake.userCountMutex.Lock()
	ret, specificReturn := fake.userCountReturnsOnCall[len(fake.userCountArgsForCall)]
	fake.userCountArgsForCall = append(fake.userCountArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.UserCountStub
	fakeReturns := fake.userCountReturns
	fake.recordInvocation("UserCount", []interface{}{arg1})
	fake.userCountMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLeaderBoard) UserCountCallCount() int {
	fake.userCountMutex.RLock()
	defer fake.userCountMutex.RUnlock()
	return len(fake.userCountArgsForCall)
}

func (fake *FakeLeaderBoard) UserCountCalls(stub func(context.Context) (int, error)) {
	fake.userCountMutex.Lock()
	defer fake.userCountMutex.Unlock()
	fake.UserCountStub = stub
}

func (fake *FakeLeaderBoard) UserCountArgsForCall(i int) context.Context {
	fake.userCountMutex.RLock()
	defer fake.userCountMutex.RUnlock()
	argsForCall := fake.userCountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLeaderBoard) UserCountReturns(result1 int, result2 error) {
	fake.userCountMutex.Lock()
	defer fake.userCountMutex.Unlock()
	fake.UserCountStub = nil
	fake.userCountReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaderBoard) UserCountReturnsOnCall(i int, result1 int, result2 error) {
	fake.userCountMutex.Lock()
	defer fake.userCountMutex.Unlock()
	fake.UserCountStub = nil
	if fake.userCountReturnsOnCall == nil {
		fake.userCountReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.userCountReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaderBoard) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRanksMutex.RLock()
	defer fake.getRanksMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.setUserMutex.RLock()
	defer fake.setUserMutex.RUnlock()
	fake.userCountMutex.RLock()
	defer fake.userCountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLeaderBoard) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.LeaderBoard = new(FakeLeaderBoard)
